[
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FornecedoresService",
        "importPath": "lajeh_api.fornecedores.services",
        "description": "lajeh_api.fornecedores.services",
        "isExtraImport": true,
        "detail": "lajeh_api.fornecedores.services",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "Fornecedor",
        "importPath": "lajeh_api.fornecedores.models",
        "description": "lajeh_api.fornecedores.models",
        "isExtraImport": true,
        "detail": "lajeh_api.fornecedores.models",
        "documentation": {}
    },
    {
        "label": "FornecedorCreate",
        "importPath": "lajeh_api.fornecedores.schemas",
        "description": "lajeh_api.fornecedores.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.fornecedores.schemas",
        "documentation": {}
    },
    {
        "label": "FornecedorResponse",
        "importPath": "lajeh_api.fornecedores.schemas",
        "description": "lajeh_api.fornecedores.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.fornecedores.schemas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "computed_field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "table_registry",
        "importPath": "lajeh_api.users.models",
        "description": "lajeh_api.users.models",
        "isExtraImport": true,
        "detail": "lajeh_api.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "lajeh_api.users.models",
        "description": "lajeh_api.users.models",
        "isExtraImport": true,
        "detail": "lajeh_api.users.models",
        "documentation": {}
    },
    {
        "label": "RoleUser",
        "importPath": "lajeh_api.users.models",
        "description": "lajeh_api.users.models",
        "isExtraImport": true,
        "detail": "lajeh_api.users.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "isExtraImport": true,
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "lajeh_api.users.services",
        "description": "lajeh_api.users.services",
        "isExtraImport": true,
        "detail": "lajeh_api.users.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "lajeh_api.users.services",
        "description": "lajeh_api.users.services",
        "isExtraImport": true,
        "detail": "lajeh_api.users.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "lajeh_api.users.services",
        "description": "lajeh_api.users.services",
        "isExtraImport": true,
        "detail": "lajeh_api.users.services",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "lajeh_api.database",
        "description": "lajeh_api.database",
        "isExtraImport": true,
        "detail": "lajeh_api.database",
        "documentation": {}
    },
    {
        "label": "check_connection",
        "importPath": "lajeh_api.database",
        "description": "lajeh_api.database",
        "isExtraImport": true,
        "detail": "lajeh_api.database",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "lajeh_api.users.repositories",
        "description": "lajeh_api.users.repositories",
        "isExtraImport": true,
        "detail": "lajeh_api.users.repositories",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "lajeh_api.users.repositories",
        "description": "lajeh_api.users.repositories",
        "isExtraImport": true,
        "detail": "lajeh_api.users.repositories",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "get_user_service",
        "importPath": "lajeh_api.users.dependencies",
        "description": "lajeh_api.users.dependencies",
        "isExtraImport": true,
        "detail": "lajeh_api.users.dependencies",
        "documentation": {}
    },
    {
        "label": "UserController",
        "importPath": "lajeh_api.users.controllers",
        "description": "lajeh_api.users.controllers",
        "isExtraImport": true,
        "detail": "lajeh_api.users.controllers",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "lajeh_api.settings",
        "description": "lajeh_api.settings",
        "isExtraImport": true,
        "detail": "lajeh_api.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "lajeh_api.settings",
        "description": "lajeh_api.settings",
        "isExtraImport": true,
        "detail": "lajeh_api.settings",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "lajeh_api.users.routes",
        "description": "lajeh_api.users.routes",
        "isExtraImport": true,
        "detail": "lajeh_api.users.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "lajeh_api.fornecedores.controllers",
        "description": "lajeh_api.fornecedores.controllers",
        "isExtraImport": true,
        "detail": "lajeh_api.fornecedores.controllers",
        "documentation": {}
    },
    {
        "label": "configure_cloudinary",
        "importPath": "lajeh_api.configs.cloudinary.main",
        "description": "lajeh_api.configs.cloudinary.main",
        "isExtraImport": true,
        "detail": "lajeh_api.configs.cloudinary.main",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "configure_cloudinary",
        "kind": 2,
        "importPath": "lajeh_api.configs.cloudinary.main",
        "description": "lajeh_api.configs.cloudinary.main",
        "peekOfCode": "def configure_cloudinary():\n    cloudinary.config( \n        cloud_name = \"dcezopogd\", \n        api_key = \"554937882793472\", \n        api_secret = \"ryTyn3wz0KxGrGQkuVehD5HMMIw\", \n        secure=True\n    )",
        "detail": "lajeh_api.configs.cloudinary.main",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "lajeh_api.fornecedores.migrations.env",
        "description": "lajeh_api.fornecedores.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "lajeh_api.fornecedores.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "lajeh_api.fornecedores.migrations.env",
        "description": "lajeh_api.fornecedores.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "lajeh_api.fornecedores.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "lajeh_api.fornecedores.migrations.env",
        "description": "lajeh_api.fornecedores.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = None",
        "detail": "lajeh_api.fornecedores.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "lajeh_api.fornecedores.migrations.env",
        "description": "lajeh_api.fornecedores.migrations.env",
        "peekOfCode": "target_metadata = None\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "lajeh_api.fornecedores.migrations.env",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "lajeh_api.fornecedores.controllers",
        "description": "lajeh_api.fornecedores.controllers",
        "peekOfCode": "app = FastAPI()\nrouter = APIRouter(prefix=\"/fornecedor\", tags=[\"fornecedor\"]) \n@router.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    response = await FornecedoresService.create_upload_fornecedor_service(file)\n    return response\n# @router.get(\"/processfile/\")\n# def process_file (url:str):\n#     try:\n#         response = FornecedoresService.process_excel_file(url)",
        "detail": "lajeh_api.fornecedores.controllers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "lajeh_api.fornecedores.controllers",
        "description": "lajeh_api.fornecedores.controllers",
        "peekOfCode": "router = APIRouter(prefix=\"/fornecedor\", tags=[\"fornecedor\"]) \n@router.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    response = await FornecedoresService.create_upload_fornecedor_service(file)\n    return response\n# @router.get(\"/processfile/\")\n# def process_file (url:str):\n#     try:\n#         response = FornecedoresService.process_excel_file(url)\n#         return response",
        "detail": "lajeh_api.fornecedores.controllers",
        "documentation": {}
    },
    {
        "label": "Fornecedor",
        "kind": 6,
        "importPath": "lajeh_api.fornecedores.models",
        "description": "lajeh_api.fornecedores.models",
        "peekOfCode": "class Fornecedor:\n    __tablename__ = \"fornecedores\"\n    created_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now(), server_onupdate=func.now()\n    )\n    nome:Mapped[str] = mapped_column(unique=True, nullable=False)\n    email:Mapped[str] = mapped_column(unique=True, nullable=False)",
        "detail": "lajeh_api.fornecedores.models",
        "documentation": {}
    },
    {
        "label": "table_registry",
        "kind": 5,
        "importPath": "lajeh_api.fornecedores.models",
        "description": "lajeh_api.fornecedores.models",
        "peekOfCode": "table_registry = registry()\n@table_registry.mapped_as_dataclass\nclass Fornecedor:\n    __tablename__ = \"fornecedores\"\n    created_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now(), server_onupdate=func.now()\n    )",
        "detail": "lajeh_api.fornecedores.models",
        "documentation": {}
    },
    {
        "label": "Fornecedorrepository",
        "kind": 6,
        "importPath": "lajeh_api.fornecedores.repositories",
        "description": "lajeh_api.fornecedores.repositories",
        "peekOfCode": "class Fornecedorrepository:\n    def __init__(self, db_session: Session):\n        pass",
        "detail": "lajeh_api.fornecedores.repositories",
        "documentation": {}
    },
    {
        "label": "FornecedorCreate",
        "kind": 6,
        "importPath": "lajeh_api.fornecedores.schemas",
        "description": "lajeh_api.fornecedores.schemas",
        "peekOfCode": "class FornecedorCreate(BaseModel):\n    nome:str\n    email:str\n    telefone:str\nclass FornecedorResponse(BaseModel):\n    id:str\n    nome:str\n    email:str\n    telefone:str\n    created_at: datetime",
        "detail": "lajeh_api.fornecedores.schemas",
        "documentation": {}
    },
    {
        "label": "FornecedorResponse",
        "kind": 6,
        "importPath": "lajeh_api.fornecedores.schemas",
        "description": "lajeh_api.fornecedores.schemas",
        "peekOfCode": "class FornecedorResponse(BaseModel):\n    id:str\n    nome:str\n    email:str\n    telefone:str\n    created_at: datetime\n    updated_at:datetime\n    model_config={\n        \"from_attributes\": True\n    }",
        "detail": "lajeh_api.fornecedores.schemas",
        "documentation": {}
    },
    {
        "label": "FornecedoresService",
        "kind": 6,
        "importPath": "lajeh_api.fornecedores.services",
        "description": "lajeh_api.fornecedores.services",
        "peekOfCode": "class FornecedoresService:\n    @staticmethod\n    async def create_upload_fornecedor_service(file: UploadFile):\n        try:\n            file_byte = await file.read()\n            uploud_result = cloudinary.uploader.upload(\n                file=file_byte, \n                resource_type=\"auto\",\n                public_id=file.filename.split(\".\")[0] \n            )",
        "detail": "lajeh_api.fornecedores.services",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "lajeh_api.users.migrations.versions.4b222bfa880a_create_users_table",
        "description": "lajeh_api.users.migrations.versions.4b222bfa880a_create_users_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n    sa.Column('username', sa.String(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('password', sa.String(), nullable=False),\n    sa.Column('role', sa.Enum('admin', 'user', name='roleuser'), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),",
        "detail": "lajeh_api.users.migrations.versions.4b222bfa880a_create_users_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "lajeh_api.users.migrations.versions.4b222bfa880a_create_users_table",
        "description": "lajeh_api.users.migrations.versions.4b222bfa880a_create_users_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "lajeh_api.users.migrations.versions.4b222bfa880a_create_users_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "lajeh_api.users.migrations.env",
        "description": "lajeh_api.users.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"\n    Executa as migrações no modo 'offline'.\n    Neste modo, o contexto é configurado com apenas uma URL,\n    e não com um Engine. \n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,",
        "detail": "lajeh_api.users.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "lajeh_api.users.migrations.env",
        "description": "lajeh_api.users.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"\n    Executa as migrações no modo 'online'.\n    Neste modo, um Engine é criado e associado ao contexto.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "lajeh_api.users.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "lajeh_api.users.migrations.env",
        "description": "lajeh_api.users.migrations.env",
        "peekOfCode": "target_metadata = table_registry.metadata\n# Configuração do Alembic\nconfig = context.config\n# Configuração do logger com base no arquivo alembic.ini\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\ndef run_migrations_offline() -> None:\n    \"\"\"\n    Executa as migrações no modo 'offline'.\n    Neste modo, o contexto é configurado com apenas uma URL,",
        "detail": "lajeh_api.users.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "lajeh_api.users.migrations.env",
        "description": "lajeh_api.users.migrations.env",
        "peekOfCode": "config = context.config\n# Configuração do logger com base no arquivo alembic.ini\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\ndef run_migrations_offline() -> None:\n    \"\"\"\n    Executa as migrações no modo 'offline'.\n    Neste modo, o contexto é configurado com apenas uma URL,\n    e não com um Engine. \n    \"\"\"",
        "detail": "lajeh_api.users.migrations.env",
        "documentation": {}
    },
    {
        "label": "UserController",
        "kind": 6,
        "importPath": "lajeh_api.users.controllers",
        "description": "lajeh_api.users.controllers",
        "peekOfCode": "class UserController:\n    def __init__(self, user_service: UserService):\n        self.user_service = user_service\n    def create_user(self, user: UserCreate) -> UserResponse:\n        \"\"\"\n        Lógica para criar um novo usuário.\n        \"\"\"\n        return self.user_service.create_user(user)",
        "detail": "lajeh_api.users.controllers",
        "documentation": {}
    },
    {
        "label": "get_user_repository",
        "kind": 2,
        "importPath": "lajeh_api.users.dependencies",
        "description": "lajeh_api.users.dependencies",
        "peekOfCode": "def get_user_repository(db: Session = Depends(get_db)):\n    return UserRepository(db_session=db)\ndef get_user_service(user_repository: UserRepository = Depends(get_user_repository)):\n    return UserService(user_repository=user_repository)\n# def get_user_controller(user_service: UserService = Depends(get_user_service)):\n#     return UserController(user_service=user_service)",
        "detail": "lajeh_api.users.dependencies",
        "documentation": {}
    },
    {
        "label": "get_user_service",
        "kind": 2,
        "importPath": "lajeh_api.users.dependencies",
        "description": "lajeh_api.users.dependencies",
        "peekOfCode": "def get_user_service(user_repository: UserRepository = Depends(get_user_repository)):\n    return UserService(user_repository=user_repository)\n# def get_user_controller(user_service: UserService = Depends(get_user_service)):\n#     return UserController(user_service=user_service)",
        "detail": "lajeh_api.users.dependencies",
        "documentation": {}
    },
    {
        "label": "RoleUser",
        "kind": 6,
        "importPath": "lajeh_api.users.models",
        "description": "lajeh_api.users.models",
        "peekOfCode": "class RoleUser(str, Enum):\n    admin = \"admin\"\n    user = \"user\"\n# Mapeamento do objeto relacional\n@table_registry.mapped_as_dataclass\nclass User:\n    __tablename__ = \"users\"\n    # Campos com valores padrão devem vir depois\n    created_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now()",
        "detail": "lajeh_api.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "lajeh_api.users.models",
        "description": "lajeh_api.users.models",
        "peekOfCode": "class User:\n    __tablename__ = \"users\"\n    # Campos com valores padrão devem vir depois\n    created_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        init=False, server_default=func.now(), server_onupdate=func.now()\n    )\n    # Campos sem valor padrão podem vir antes",
        "detail": "lajeh_api.users.models",
        "documentation": {}
    },
    {
        "label": "table_registry",
        "kind": 5,
        "importPath": "lajeh_api.users.models",
        "description": "lajeh_api.users.models",
        "peekOfCode": "table_registry = registry()\nclass RoleUser(str, Enum):\n    admin = \"admin\"\n    user = \"user\"\n# Mapeamento do objeto relacional\n@table_registry.mapped_as_dataclass\nclass User:\n    __tablename__ = \"users\"\n    # Campos com valores padrão devem vir depois\n    created_at: Mapped[datetime] = mapped_column(",
        "detail": "lajeh_api.users.models",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "lajeh_api.users.repositories",
        "description": "lajeh_api.users.repositories",
        "peekOfCode": "class UserRepository:\n    def __init__(self, db_session: AsyncSession):\n        self.db_session = db_session\n    async def get_user_by_username(self, username: str) -> User | None:\n        stmt = select(User).where(User.username == username)\n        result = await self.db_session.execute(stmt)\n        return result.scalars().first()\n    async def create_user_rp(self, user: UserCreate) -> UserResponse:\n        try:\n            user_data = user.model_dump()  ",
        "detail": "lajeh_api.users.repositories",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "lajeh_api.users.routes",
        "description": "lajeh_api.users.routes",
        "peekOfCode": "router = APIRouter(prefix=\"/users\", tags=[\"users\"])\n@router.post(\"/register\", response_model=UserResponse)\nasync def register_user(\n    user: UserCreate,\n    user_service: UserService = Depends(get_user_service)\n):\n    user_controller = UserController(user_service=user_service)\n    return await user_controller.create_user(user)",
        "detail": "lajeh_api.users.routes",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    username:str\n    email: str\n    password:str\n    role: RoleUser\nclass UserResponse(BaseModel):\n    id: str\n    username: str\n    email: str\n    role: RoleUser",
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "lajeh_api.users.schemas",
        "description": "lajeh_api.users.schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: str\n    username: str\n    email: str\n    role: RoleUser\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(\n        from_attributes=True,\n        arbitrary_types_allowed=True,",
        "detail": "lajeh_api.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "lajeh_api.users.services",
        "description": "lajeh_api.users.services",
        "peekOfCode": "class UserService:\n    def __init__(self, user_repository: UserRepository):\n        self.user_repository = user_repository\n    async def create_user(self, user: UserCreate) -> UserResponse:\n        existing_user, new_user = await asyncio.gather(self.user_repository.get_user_by_username(user.username), self.user_repository.create_user_rp(user))\n        if existing_user:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"E-mail já cadastrado!\"\n            )",
        "detail": "lajeh_api.users.services",
        "documentation": {}
    },
    {
        "label": "check_connection",
        "kind": 2,
        "importPath": "lajeh_api.database",
        "description": "lajeh_api.database",
        "peekOfCode": "def check_connection(engine):\n    with engine.connect() as conn:\n        conn.execute(text(\"SELECT 1\"))",
        "detail": "lajeh_api.database",
        "documentation": {}
    },
    {
        "label": "AsyncSessionLocal",
        "kind": 5,
        "importPath": "lajeh_api.database",
        "description": "lajeh_api.database",
        "peekOfCode": "AsyncSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine,\n    class_=AsyncSession\n) \nBase = declarative_base()\nasync def get_db():    \n    async with AsyncSessionLocal() as session:\n        yield session",
        "detail": "lajeh_api.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "lajeh_api.database",
        "description": "lajeh_api.database",
        "peekOfCode": "Base = declarative_base()\nasync def get_db():    \n    async with AsyncSessionLocal() as session:\n        yield session\ndef check_connection(engine):\n    with engine.connect() as conn:\n        conn.execute(text(\"SELECT 1\"))",
        "detail": "lajeh_api.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "lajeh_api.main",
        "description": "lajeh_api.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\napp.include_router(user_router)\napp.include_router(fornecedor_router)\nconfigure_cloudinary()",
        "detail": "lajeh_api.main",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "lajeh_api.settings",
        "description": "lajeh_api.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    model_config=SettingsConfigDict(\n        env_file='./.env', env_file_encoding='utf-8'\n    )\n    DATABASE_URL:str",
        "detail": "lajeh_api.settings",
        "documentation": {}
    },
    {
        "label": "create_modules",
        "kind": 2,
        "importPath": "modules",
        "description": "modules",
        "peekOfCode": "def create_modules():\n    \"\"\"\n    Cria um novo módulo com arquivos padronizados.\n    \"\"\"\n    module_name = input(\"Nome do módulo: \")\n    module_path = os.path.join(MODULES_DIR, module_name)\n    if os.path.exists(module_path):\n        print(f\"Erro: o módulo {module_name} já existe!\")\n        return\n    os.makedirs(module_path)",
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "modules",
        "description": "modules",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\nMODULES_DIR = os.path.join(BASE_DIR, \"lajeh_api\")\nDEFAULT_FILES = [\n    \"__init__.py\",\n    \"controllers.py\",\n    \"models.py\",\n    \"schemas.py\",\n    \"repositories.py\",\n    \"routes.py\",\n    \"services.py\",",
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "MODULES_DIR",
        "kind": 5,
        "importPath": "modules",
        "description": "modules",
        "peekOfCode": "MODULES_DIR = os.path.join(BASE_DIR, \"lajeh_api\")\nDEFAULT_FILES = [\n    \"__init__.py\",\n    \"controllers.py\",\n    \"models.py\",\n    \"schemas.py\",\n    \"repositories.py\",\n    \"routes.py\",\n    \"services.py\",\n]",
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILES",
        "kind": 5,
        "importPath": "modules",
        "description": "modules",
        "peekOfCode": "DEFAULT_FILES = [\n    \"__init__.py\",\n    \"controllers.py\",\n    \"models.py\",\n    \"schemas.py\",\n    \"repositories.py\",\n    \"routes.py\",\n    \"services.py\",\n]\ndef create_modules():",
        "detail": "modules",
        "documentation": {}
    }
]